{"version":3,"sources":["extends-class.js"],"names":["exportModule","extendsClass","parentType","childType","Error","isParentClass","isParentObject","isChildObject","objectToObject","objectToFunction","functionToFunction","ResultAnonymousClass","this","hasOwnProperty","$$isReconstructing","$$parent","constructor","apply","arguments","args","Array","prototype","slice","call","pop","KEY_DENNY_NEW_OPERATOR","$$reconstruct","parent","eachList","proto","i","length","key","KEY_IDENTITY","KEY_PARENT_TYPE_LIST","push","DynamicMixinClass","parentInstance","isWrappedClass","new","newObject","wrappedArguments","resultAnonymousInstance","dynamicMixinInstance","isExecutingNativeConstructor","Type","type","isWrappedObject","obj","parentClass","parentTypeList","len","isChildClass","childClass","isInstanceOf","NAME","VERSION","define","amd","cmd","module","exports","window","global"],"mappings":"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AA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA,KAAA,IACA,MAAA,IAAA0B,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA,KAAA,IACA,MAAA,IAAA0B,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,KAAA,IACA,MAAA,IAAA0B,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACA,KAAA,IACA,MAAA,IAAA0B,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IACA,KAAA,IACA,MAAA,IAAA0B,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IACA,KAAA,IACA,MAAA,IAAA0B,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IACA,KAAA,IACA,MAAA,IAAA0B,GAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OArUA,GAAAc,GAAA,kEACAR,EAAA,+EACAS,EAAA,4EAgWA,OAlTAjC,GAAAqC,eAAA,SAAAQ,GACA,MAAAA,IAAAA,EAAAb,KAAAA,IAAA,GAEAhC,EAAA8C,gBAAA,SAAAC,GACA,MAAAA,IAAA/C,EAAAqC,eAAAU,EAAAhC,eAAA,GAEAf,EAAAI,cAAA,SAAAyC,EAAAG,GACA,GAAAhD,EAAAqC,eAAAQ,GAEA,IAAA,GADAI,GAAAJ,EAAAZ,GACAJ,EAAA,EAAAqB,EAAAD,EAAAnB,OAAAD,EAAAqB,EAAArB,IACA,GAAAoB,EAAApB,KAAAmB,EACA,OAAA,CAIA,QAAA,GAEAhD,EAAAmD,aAAA,SAAAN,EAAAO,GACA,MAAApD,GAAAI,cAAAgD,EAAAP,IAEA7C,EAAAqD,aAAA,SAAAN,EAAAF,GACA,GAAA,gBAAAE,GAAA,CACA,GAAA,kBAAAF,GACA,MAAAE,aAAAF,EACA,IAAA,gBAAAA,GACA,MAAA7C,GAAA8C,gBAAAC,IAAAA,IAAAF,GACAE,EAAAhC,cAAA8B,GAAA7C,EAAAI,cAAA2C,EAAAhC,YAAA8B,GAGA,OAAA,GAqRA7C,KASAD,GAAAuD,KAAA,eACAvD,EAAAwD,QAAA,QAMA,kBAAAC,UAAAA,OAAAC,KAAAD,OAAAE,KAEAF,OAAA,WACA,MAAAzD,KAEA,mBAAA4D,SAAA,gBAAAC,SAEAD,OAAAC,QAAA7D,EAGAY,KAAAZ,EAAAuD,MAAAvD,IAIAuB,KAAAX,OAAA,mBAAAkD,QAAAA,OAAAC","file":"extends-class.min.js","sourceRoot":"/source/","sourcesContent":["/**\n * es3-extends-class - Extends classes as perfect as possible for ES3(JavaScript 1.5))\n * @version v1.0.0\n * @link https://github.com/wujikui/es3-extends-class#readme\n * @license MIT\n */\n(function () {\n\n    /*\n     * include module\n     */\n    var exportModule = new function () {\n        return (function () {\n               \n                   var KEY_IDENTITY = '$$EXTENDS_OBJECT_CLASS-{08929965-827f-45a7-bcbf-81afeefbf65f}$$';\n                   var KEY_DENNY_NEW_OPERATOR = '$$EXTENDS_OBJECT_DENNY_NEW_OPERATOR-{f74c15f3-5081-40a8-ad09-2d07bc8982bb}$$';\n                   var KEY_PARENT_TYPE_LIST = '$$EXTENDS_OBJECT_PARENT_TYPE_LIST-{3813ca37-3773-4bc4-8f5c-0b0c2136ea89}$$';\n               \n                   function extendsClass(parentType, childType) {\n               \n                       /*\n                        * normalize arguments\n                        */\n                       if (typeof parentType !== 'function' && typeof parentType !== 'object') {\n                           throw new Error('[invalid param ParentType] arguments[0] should be' +\n                               ' a function or object: ' + parentType);\n                       }\n                       if (typeof childType !== 'function' && typeof childType !== 'object') {\n                           throw new Error('[invalid param ChildType] arguments[1] should be ' +\n                               'a function or object: ' + childType);\n                       }\n                       if (extendsClass.isParentClass(childType, parentType)) {\n                           throw new Error('[invalid param] parentType is already at childType\\'s inherited chain');\n                       }\n                       if (parentType === childType) {\n                           throw new Error('[invalid param] cannot inherit from itself');\n                       }\n               \n                       /*\n                        * affirm extends pattern\n                        */\n                       var isParentObject = typeof  parentType === 'object';\n                       var isChildObject = typeof childType === 'object';\n                       if (!isParentObject && isChildObject) {\n                           throw new Error('[invalid action] not supports extends an object from a function');\n                       }\n               \n                       /*\n                        * extends\n                        */\n                       if (!isParentObject && !isChildObject) {\n                           return functionToFunction(parentType, childType);\n                       }\n                       if (isParentObject && isChildObject) {\n                           return objectToObject(parentType, childType);\n                       }\n                       if (isParentObject && !isChildObject) {\n                           return objectToFunction(parentType, childType);\n                       }\n               \n                   }\n               \n                   extendsClass.isWrappedClass = function (type) {\n                       return (type && type[KEY_IDENTITY] === KEY_IDENTITY) || false;\n                   };\n                   extendsClass.isWrappedObject = function (obj) {\n                       return (obj && extendsClass.isWrappedClass(obj.constructor)) || false;\n                   };\n                   extendsClass.isParentClass = function (type, parentClass) {\n                       if (extendsClass.isWrappedClass(type)) {\n                           var parentTypeList = type[KEY_PARENT_TYPE_LIST];\n                           for (var i = 0, len = parentTypeList.length; i < len; i++) {\n                               if (parentTypeList[i] === parentClass) {\n                                   return true;\n                               }\n                           }\n                       }\n                       return false;\n                   };\n                   extendsClass.isChildClass = function (type, childClass) {\n                       return extendsClass.isParentClass(childClass, type);\n                   };\n                   extendsClass.isInstanceOf = function (obj, type) {\n                       if (typeof obj === 'object') {\n                           if (typeof type === 'function') {\n                               return obj instanceof type;\n                           } else if (typeof type === 'object') {\n                               return (extendsClass.isWrappedObject(obj) && obj === type) ||\n                                   obj.constructor === type || extendsClass.isParentClass(obj.constructor, type);\n                           }\n                       }\n                       return false;\n                   };\n               \n                   // return new Result() = {\n                   //     ...: childType.this,\n                   //     __proto__: {\n                   //         ...: childType.prototype\n                   //         __proto__: {\n                   //             ...: parentType.this\n                   //             __proto__: {\n                   //                 ...: parentType.prototype\n                   //             }\n                   //         }\n                   //     }\n                   // }\n                   function functionToFunction(parentType, childType) {\n               \n                       var ResultAnonymousClass = function () {\n               \n                           if (!this.hasOwnProperty('$$parent')) { // new\n               \n                               var args = Array.prototype.slice.call(arguments);\n                               if (args.pop() !== KEY_DENNY_NEW_OPERATOR) {\n                                   throw new Error('not supports new operator, uses instead of `Type.new()`');\n                               }\n               \n                               this.$$parent = args.pop();\n                               // uses `this.$$reconstruct(arg1...)` to call parentType's constructor\n                               // this would cause executes constructor on inherited chain again, from baseClass to subClass\n                               this.$$reconstruct = (function (parent) {\n                                   return function () {\n                                       parent.constructor.apply(parent, arguments);\n                                   }\n                               })(this.$$parent);\n                               this.$$isReconstructing = false;\n               \n                               childType.apply(this, args);\n               \n                           } else { // reconstruct\n               \n                               // user can also call `ParentType.apply(parentInstance, [])` instead of `this.$$reconstruct(...)`\n               \n                               this.$$isReconstructing = true;\n               \n                               this.$$parent.constructor.apply(this.$$parent, arguments);\n                               childType.apply(this, arguments);\n               \n                               this.$$isReconstructing = false;\n               \n                           }\n                       };\n                       ResultAnonymousClass.prototype = (function () {\n                           // Type.prototype will changed when instantiates Type every time\n                           // initial prototype will be replaced after instantiated Type\n                           var eachList = [parentType.prototype, parentType, childType.prototype, childType];\n                           var proto = {};\n                           for (var i = 0; i < eachList.length; i++) {\n                               for (var key in eachList[i]) {\n                                   if (eachList[i].hasOwnProperty(key)) {\n                                       proto[key] = eachList[i][key]\n                                   }\n                               }\n                           }\n                           return proto;\n                       }());\n               \n                       ResultAnonymousClass[KEY_IDENTITY] = KEY_IDENTITY;\n                       ResultAnonymousClass[KEY_PARENT_TYPE_LIST] = [];\n                       if (parentType[KEY_PARENT_TYPE_LIST]) {\n                           ResultAnonymousClass[KEY_PARENT_TYPE_LIST] = parentType[KEY_PARENT_TYPE_LIST].slice(0);\n                       }\n                       ResultAnonymousClass[KEY_PARENT_TYPE_LIST].push(parentType);\n               \n                       (function () {\n                           for (var key in parentType) {\n                               if (key !== 'prototype' && key !== KEY_IDENTITY && key !== KEY_PARENT_TYPE_LIST) {\n                                   ResultAnonymousClass[key] = parentType[key];\n                               }\n                           }\n                       })();\n                       (function () {\n                           for (var key in childType) {\n                               if (key !== 'prototype' && key !== KEY_IDENTITY && key !== KEY_PARENT_TYPE_LIST) {\n                                   ResultAnonymousClass[key] = childType[key];\n                               }\n                           }\n                       })();\n               \n                       var DynamicMixinClass = function () {\n                           var prototype = childType.prototype;\n                           for (var key in prototype) {\n                               if (prototype.hasOwnProperty(key)) {\n                                   this[key] = prototype[key]\n                               }\n                           }\n                       };\n               \n                       ResultAnonymousClass['new'] = function () { // not allowed to uses new operator\n               \n                           var parentInstance = extendsClass.isWrappedClass(parentType) ?\n                               parentType.new.apply(parentType, arguments) : newObject(parentType, arguments);\n                           DynamicMixinClass.prototype = parentInstance;\n                           DynamicMixinClass.prototype.constructor = parentType; // TODO ?? what happened!  now `parentInstance.constructor === parentType`\n               \n                           ResultAnonymousClass.prototype = new DynamicMixinClass(); // dynamic prototype!!!\n                           ResultAnonymousClass.prototype.constructor = ResultAnonymousClass;\n               \n                           var wrappedArguments = Array.prototype.slice.call(arguments);\n                           wrappedArguments.push(parentInstance);\n                           wrappedArguments.push(KEY_DENNY_NEW_OPERATOR); // denny new\n               \n                           return newObject(ResultAnonymousClass, wrappedArguments);\n                       };\n               \n                       return ResultAnonymousClass;\n                   }\n               \n                   // return result = {\n                   //     prototype: result,       // references to itself, we can use it via Result.prototype.foo.call(), what be equivalent to result.foo()\n                   //     ...: childType,\n                   //     __proto__: {\n                   //         ...: parentType\n                   //     }\n                   // }\n                   function objectToObject(parentType, childType) {\n               \n                       var ResultAnonymousClass = function () {\n                           for (var key in childType) {\n                               if (childType.hasOwnProperty(key)) {\n                                   this[key] = childType[key];\n                               }\n                           }\n                           this.$$parent = parentType; // just keep the same API\n                           this.$$reconstruct = function () {\n                           };\n                           this.$$isReconstructing = false;\n                       };\n                       ResultAnonymousClass.prototype = parentType;\n                       ResultAnonymousClass.prototype.constructor = ResultAnonymousClass;\n               \n                       ResultAnonymousClass[KEY_IDENTITY] = KEY_IDENTITY;\n                       ResultAnonymousClass[KEY_PARENT_TYPE_LIST] = [];\n                       if (parentType[KEY_PARENT_TYPE_LIST]) {\n                           ResultAnonymousClass[KEY_PARENT_TYPE_LIST] = parentType[KEY_PARENT_TYPE_LIST].slice(0);\n                       }\n                       ResultAnonymousClass[KEY_PARENT_TYPE_LIST].push(parentType);\n               \n                       var resultAnonymousInstance = new ResultAnonymousClass();\n                       resultAnonymousInstance.prototype = resultAnonymousInstance; // references to itself, while result is not a function/constructor\n                       resultAnonymousInstance[KEY_IDENTITY] = ResultAnonymousClass[KEY_IDENTITY];\n                       resultAnonymousInstance[KEY_PARENT_TYPE_LIST] = ResultAnonymousClass[KEY_PARENT_TYPE_LIST];\n               \n                       resultAnonymousInstance['new'] = function () { // keep the same API\n                           return resultAnonymousInstance;\n                       };\n               \n                       return resultAnonymousInstance; // return is an object, not function/constructor\n                   }\n               \n                   // return new Result() = {\n                   //     ...: childType.this,\n                   //     __proto__: {\n                   //         ...: childType.prototype,\n                   //         __proto__: {\n                   //             ...: parentType          // parentType is a plain object\n                   //         }\n                   //     }\n                   // }\n                   function objectToFunction(parentType, childType) {\n               \n                       var DynamicMixinClass = function () {\n                           for (var key in childType.prototype) {\n                               if (childType.prototype.hasOwnProperty(key)) {\n                                   this[key] = childType.prototype[key]\n                               }\n                           }\n                       };\n                       DynamicMixinClass.prototype = parentType;\n                       DynamicMixinClass.prototype.constructor = DynamicMixinClass;\n                       var dynamicMixinInstance = new DynamicMixinClass();\n               \n                       var ResultAnonymousClass = function () {\n                           if (!this.hasOwnProperty('$$parent')) {\n                               this.$$parent = parentType; // just keep the same API\n                               this.$$reconstruct = function () {\n                               };\n                               this.$$isReconstructing = true;\n                           }\n                           childType.apply(this, arguments);\n                           this.$$parent.isExecutingNativeConstructor = false;\n                       };\n                       ResultAnonymousClass.prototype = dynamicMixinInstance; // prototype is still static\n                       ResultAnonymousClass.prototype.constructor = ResultAnonymousClass;\n               \n                       ResultAnonymousClass[KEY_IDENTITY] = KEY_IDENTITY;\n                       ResultAnonymousClass[KEY_PARENT_TYPE_LIST] = [];\n                       if (parentType[KEY_PARENT_TYPE_LIST]) {\n                           ResultAnonymousClass[KEY_PARENT_TYPE_LIST] = parentType[KEY_PARENT_TYPE_LIST].slice(0);\n                       }\n                       ResultAnonymousClass[KEY_PARENT_TYPE_LIST].push(parentType);\n               \n                       ResultAnonymousClass['new'] = function () { // just keep the same API. we can also use new operator\n                           return newObject(ResultAnonymousClass, arguments);\n                       };\n               \n                       return ResultAnonymousClass;\n                   }\n               \n                   // return new Type() for uncertain parameter\n                   function newObject(Type, args) {\n                       if (args.length < 8) {\n                           switch (args.length) {\n                               case 0:\n                                   return new Type();\n                               case 1:\n                                   return new Type(args[0]);\n                               case 2:\n                                   return new Type(args[0], args[1]);\n                               case 3:\n                                   return new Type(args[0], args[1], args[2]);\n                               case 4:\n                                   return new Type(args[0], args[1], args[2], args[3]);\n                               case 5:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4]);\n                               case 6:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5]);\n                               case 7:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n                           }\n                       } else if (args.length <= 16) {\n                           switch (args.length) {\n                               case 8:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n                               case 9:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);\n                               case 10:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);\n                               case 11:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]);\n                               case 12:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]);\n                               case 13:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]);\n                               case 14:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]);\n                               case 15:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]);\n                               case 16:\n                                   return new Type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15]);\n                           }\n                       } else {\n                           throw new Error('[not supports] not supports long arguments. arguments.length == ' + arguments.length);\n                       }\n               \n               \n                       // code generator\n                       // [[0, 8], [8, 16 + 1]].forEach(function (conf) {\n                       //     var begin = conf[0];\n                       //     var end = conf[1];\n                       //     var result = [];\n                       //     result.push('switch (args.length) {');\n                       //     for (var len = begin; len < end; len++) {\n                       //         result.push('\\tcase ' + len + ':\\n\\t\\treturn new Type(' + (function () {\n                       //                 var r = [];\n                       //                 for (var i = 0; i < len; i++) {\n                       //                     r.push('args[' + i + ']')\n                       //                 }\n                       //                 return r.join(', ');\n                       //             })() +\n                       //             ');');\n                       //     }\n                       //     result.push('}');\n                       //     console.log(result.join('\\n'));\n                       //     console.log('\\n\\n\\n\\n');\n                       // });\n                   }\n               \n                   return extendsClass;\n               \n               })();\n               \n    }();\n\n    /*\n     * module info\n     */\n    exportModule.NAME = 'extendsClass';\n    exportModule.VERSION = '1.0.0';\n\n    /*\n     * exports module\n     */\n    /* eslint-disable */\n    if (typeof define === 'function' && (define.amd || define.cmd)) {\n        // AMD / CMD\n        define(function () {\n            return exportModule\n        });\n    } else if (typeof module !== 'undefined' && typeof exports === 'object') {\n        // CommonJS / NodeJS\n        module.exports = exportModule;\n    } else {\n        // window\n        this[exportModule.NAME] = exportModule;\n    }\n    /* eslint-enable */\n\n}).call(this || (typeof window !== 'undefined' ? window : global));\n"]}